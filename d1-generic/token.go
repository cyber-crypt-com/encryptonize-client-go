// Copyright 2022 CYBERCRYPT
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by copy-client.sh. DO NOT EDIT.
// version: v1.0.0
// source: https://github.com/cybercryptio/d1-service-generic.git
// commit: 88afaccef27c4ea1feb29dccf1d2a5c3866db309

package client

import (
	"context"
	"time"

	pbauthn "github.com/cybercryptio/d1-client-go/d1-generic/protobuf/authn"
	"google.golang.org/grpc/credentials"
)

// PerRPCToken is an implementation of credentials.PerRPCCredentials that calls a function on every RPC to generate an access token.
// The access token will not be encrypted during transport.
type PerRPCToken func(context.Context) (string, error)

func (getToken PerRPCToken) GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) {
	token, err := getToken(ctx)
	if err != nil {
		return nil, err
	}

	return map[string]string{
		"authorization": "bearer " + token,
	}, nil
}

func (getToken PerRPCToken) RequireTransportSecurity() bool {
	return false
}

type emptyPerRPCCredentials struct{}

func (emptyPerRPCCredentials) GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) {
	return map[string]string{}, nil
}

func (emptyPerRPCCredentials) RequireTransportSecurity() bool {
	return false
}

// NewStandalonePerRPCToken creates a new instance of PerRPCToken to be used with the Standalone ID Provider.
// It requires the transport credentials used to communicate with the D1 Service in order to call the Login endpoint.
func NewStandalonePerRPCToken(endpoint, uid, pwd string, creds credentials.TransportCredentials) PerRPCToken {
	var token string
	var tokenExpiry time.Time
	return func(ctx context.Context) (string, error) {
		// To avoid clock drift issues, refresh the token if it will expire within 1 minute.
		if time.Now().After(tokenExpiry.Add(time.Duration(-1) * time.Minute)) {
			c, err := NewBaseClient(endpoint, WithTransportCredentials(creds))
			if err != nil {
				return "", err
			}
			defer c.Close()

			res, err := c.Authn.LoginUser(
				ctx,
				&pbauthn.LoginUserRequest{
					UserId:   uid,
					Password: pwd,
				},
			)
			if err != nil {
				return "", err
			}

			tokenExpiry = time.Unix(res.ExpiryTime, 0)
			token = res.AccessToken
		}
		return token, nil
	}
}
