// Copyright 2022 CYBERCRYPT
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by copy-client.sh. DO NOT EDIT.
// version: v0.1.49-ci.10
// source: https://github.com/cybercryptio/d1-service-generic.git
// commit: 75d46a7b02caa465ac3c608fa2316c77869196e8

package client

import (
	pbauthn "github.com/cybercryptio/d1-client-go/d1-generic/protobuf/authn"
	pbauthz "github.com/cybercryptio/d1-client-go/d1-generic/protobuf/authz"
	pbindex "github.com/cybercryptio/d1-client-go/d1-generic/protobuf/index"
	pbversion "github.com/cybercryptio/d1-client-go/d1-generic/protobuf/version"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/health/grpc_health_v1"
)

// BaseClient represents the shared functionality between various D1 services.
type BaseClient struct {
	Version              pbversion.VersionClient
	Authn                pbauthn.AuthnClient
	Authz                pbauthz.AuthzClient
	Health               grpc_health_v1.HealthClient
	Index 	             pbindex.IndexClient
	Connection           *grpc.ClientConn
	transportCredentials credentials.TransportCredentials
	perRPCCredentials    credentials.PerRPCCredentials
}

// Option is used configure optional settings on the client.
type Option func(*BaseClient)

// NewBaseClient creates a new client for the given endpoint, configured with the provided options.
func NewBaseClient(endpoint string, opts ...Option) (BaseClient, error) {
	var err error
	baseClient := BaseClient{
		transportCredentials: insecure.NewCredentials(),
		perRPCCredentials:    emptyPerRPCCredentials{},
	}

	for _, opt := range opts {
		opt(&baseClient)
	}

	// Initialize connection with the service
	baseClient.Connection, err = grpc.Dial(endpoint,
		grpc.WithTransportCredentials(baseClient.transportCredentials),
		grpc.WithPerRPCCredentials(baseClient.perRPCCredentials),
	)
	if err != nil {
		return BaseClient{}, err
	}

	baseClient.Version = pbversion.NewVersionClient(baseClient.Connection)
	baseClient.Authn = pbauthn.NewAuthnClient(baseClient.Connection)
	baseClient.Authz = pbauthz.NewAuthzClient(baseClient.Connection)
	baseClient.Health = grpc_health_v1.NewHealthClient(baseClient.Connection)
	baseClient.Index = pbindex.NewIndexClient(baseClient.Connection)

	return baseClient, nil
}

// Close closes all connections to the server.
func (b *BaseClient) Close() error {
	return b.Connection.Close()
}

// WithTransportCredentials returns an Option which configures the connection level security credentials (e.g., TLS/SSL).
func WithTransportCredentials(credentials credentials.TransportCredentials) Option {
	return func(b *BaseClient) {
		b.transportCredentials = credentials
	}
}

// WithPerRPCCredentials returns an Option which configures security credentials to be attached to every RPC (e.g., oauth2).
func WithPerRPCCredentials(credentials credentials.PerRPCCredentials) Option {
	return func(b *BaseClient) {
		b.perRPCCredentials = credentials
	}
}
