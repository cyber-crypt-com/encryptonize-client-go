// Copyright 2022 CYBERCRYPT
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by copy-client.sh. DO NOT EDIT.
// version: v1.0.1-ci.8
// source: https://github.com/cybercryptio/k1.git
// commit: 6d514c91c54d3a33cdbe85362f334977f07b03db

package client

import (
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"google.golang.org/grpc/credentials/insecure"

	pb "github.com/cybercryptio/d1-client-go/k1/protobuf"
)

// Client can be used to make calls to a K1 service.
type Client struct {
	pb.KeyAPIClient
	conn                 *grpc.ClientConn
	transportCredentials credentials.TransportCredentials
}

// Option can be used to configure the behaviour of a Client.
type Option func(*Client)

// NewClient creates a new K1 client with the given options.
func NewClient(endpoint string, opts ...Option) (*Client, error) {
	var err error
	client := &Client{transportCredentials: insecure.NewCredentials()}

	for _, opt := range opts {
		opt(client)
	}

	client.conn, err = grpc.Dial(endpoint,
		grpc.WithTransportCredentials(client.transportCredentials),
	)
	if err != nil {
		return nil, err
	}

	client.KeyAPIClient = pb.NewKeyAPIClient(client.conn)

	return client, nil
}

// Close closes all connections to the server.
func (c *Client) Close() error {
	return c.conn.Close()
}

// WithTransportCredentials returns an Option which configures the connection level security
// credentials (e.g. TLS).
func WithTransportCredentials(credentials credentials.TransportCredentials) Option {
	return func(client *Client) {
		client.transportCredentials = credentials
	}
}
